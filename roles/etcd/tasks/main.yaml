---
- name: "安装 ETCD 自签证书工具"
  block:

    - name: DEBUG etcd 分组信息
      debug:
        msg: "inventory_hostname={{ inventory_hostname }}, etcd_group={{ groups['etcd'] }}"
      when: "'etcd' in group_names"

    - name: "在主ETCD节点上安装OpenSSL"
      ansible.builtin.yum:
        name: openssl
        state: present
      when: "'etcd' in group_names"
    
    - name: "在etcd和master节点上创建etcd用户和组"
      user:
        name: etcd
        comment: "ETCD User"
        shell: /sbin/nologin
        system: yes
      when: "'etcd' in group_names or 'master' in group_names"
    
    - name: "在etcd和master节点上为etcd证书创建目录"
      ansible.builtin.file:
        path: "{{ etcd_ssl }}"
        state: directory
        owner: etcd
        group: etcd
        mode: '0700'
      when: "'etcd' in group_names or 'master' in group_names"
    
    - name: "检查当前节点是否为主ETCD节点"
      ansible.builtin.set_fact:
        is_primary_etcd_node: "{{ inventory_hostname == groups['etcd'][0] }}"
    
    - name: 检查 cfssl 是否已存在
      stat:
        path: "/usr/local/bin/cfssl"
      register: cfssl_file
      when: "'etcd' in group_names and is_primary_etcd_node"
    
    - name: 下载 cfssl
      get_url:
        url: "https://pkg.cfssl.org/R1.2/cfssl_linux-amd64"
        dest: /usr/local/bin/cfssl
        mode: '0755'
        timeout: 30
      register: download_result
      retries: 10
      delay: 5
      until: download_result is succeeded
      when: "'etcd' in group_names and is_primary_etcd_node and not cfssl_file.stat.exists"
    
    - name: 检查 cfssljson 是否已存在
      stat:
        path: "/usr/local/bin/cfssljson"
      register: cfssl_json_file
      when: "'etcd' in group_names and is_primary_etcd_node"
    
    - name: 下载 cfssljson
      get_url:
        url: "https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64"
        dest: /usr/local/bin/cfssljson
        mode: '0755'
      register: download_result
      retries: 10
      delay: 5
      until: download_result is succeeded
      when: "'etcd' in group_names and is_primary_etcd_node and not cfssl_json_file.stat.exists"
    
    - name: 检查 cfssl-certinfo 是否已存在
      stat:
        path: "/usr/local/bin/cfssl-certinfo"
      register: cfssl_certinfo_file
      when: "'etcd' in group_names and is_primary_etcd_node"
    
    - name: 下载 cfssl-certinfo
      get_url:
        url: "https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64"
        dest: /usr/local/bin/cfssl-certinfo
        mode: '0755'
      register: download_result
      retries: 10
      delay: 5
      until: download_result is succeeded
      when: "'etcd' in group_names and is_primary_etcd_node and not cfssl_certinfo_file.stat.exists"

- name: 配置 ETCD 证书
  block:
    - name: 检查证书是否已存在
      stat:
        path: "{{ etcd_ssl }}/etcd-server.pem"
      register: cert_exists
      when: is_primary_etcd_node
      tags: cert-check

    - name: 创建证书目录
      file:
        path: "{{ etcd_ssl }}"
        state: directory
        owner: etcd
        group: etcd
        mode: '0700'
      when: is_primary_etcd_node

    - name: 生成 ca-config 配置文件
      template:
        src: templates/ca-config.json.j2
        dest: "{{ etcd_ssl }}/ca-config.json"
        owner: etcd
        group: etcd
        mode: '0600'
      when: is_primary_etcd_node and (not cert_exists.stat.exists or force_cert_gen|default(false))

    - name: 生成 ca 证书的 CSR 文件
      template:
        src: templates/etcd-ca-csr.json.j2
        dest: "{{ etcd_ssl }}/etcd-ca-csr.json"
        owner: etcd
        group: etcd
        mode: '0600'
      when: is_primary_etcd_node and (not cert_exists.stat.exists or force_cert_gen|default(false))

    - name: 生成etcd CA 证书和 CA 证书的 key
      shell: |
        export PATH=$PATH:/usr/local/bin
        cfssl gencert -initca etcd-ca-csr.json | cfssljson -bare etcd-ca
      args:
        chdir: "{{ etcd_ssl }}"
      when: is_primary_etcd_node and (not cert_exists.stat.exists or force_cert_gen|default(false))
      register: ca_gen_result
      changed_when: "'generated' in ca_gen_result.stdout"

    - name: 生成服务器证书请求
      template:
        src: templates/etcd-server-csr.json.j2
        dest: "{{ etcd_ssl }}/etcd-server-csr.json"
        owner: etcd
        group: etcd
        mode: '0600'
      when: is_primary_etcd_node and (not cert_exists.stat.exists or force_cert_gen|default(false))

    - name: 生成服务器证书
      shell: |
        export PATH=$PATH:/usr/local/bin
        cfssl gencert -ca=etcd-ca.pem -ca-key=etcd-ca-key.pem \
        -config=ca-config.json -profile=kubernetes etcd-server-csr.json | cfssljson -bare etcd-server
      args:
        chdir: "{{ etcd_ssl }}"
      when: is_primary_etcd_node and (not cert_exists.stat.exists or force_cert_gen|default(false))
      register: server_cert_gen
      changed_when: "'generated' in server_cert_gen.stdout"

    - name: 检查证书文件是否存在
      stat:
        path: "{{ etcd_ssl }}/{{ item }}"
      register: cert_file_stat
      loop:
        - 'etcd-ca.pem'
        - 'etcd-ca-key.pem'
        - 'etcd-server.pem'
        - 'etcd-server-key.pem'
      loop_control:
        label: "{{ item }}"
      when: is_primary_etcd_node and (not cert_exists.stat.exists or force_cert_gen|default(false))

    - name: 验证生成的证书
      assert:
        that:
          - item.stat.exists
        fail_msg: "关键证书文件 {{ item.item }} 未生成"
      loop: "{{ cert_file_stat.results }}"
      when: is_primary_etcd_node and (not cert_exists.stat.exists or force_cert_gen|default(false))

  rescue:
    - name: 证书生成失败处理
      fail:
        msg: "ETCD证书生成失败，请检查错误日志"
      when: is_primary_etcd_node

    - name: 清理可能生成的不完整文件
      file:
        path: "{{ etcd_ssl }}/{{ item }}"
        state: absent
      loop:
        - 'etcd-ca.pem'
        - 'etcd-ca-key.pem'
        - 'etcd-server.pem'
        - 'etcd-server-key.pem'
      ignore_errors: yes
      when: is_primary_etcd_node

- name: 分发证书到集群节点
  block:
    - name: 检查主节点证书是否存在
      stat:
        path: "{{ etcd_ssl }}/etcd-server.pem"
      register: primary_cert_check
      run_once: true
      delegate_to: "{{ groups['etcd'][0] }}"

    - name: 从主节点收集证书
      fetch:
        src: "{{ etcd_ssl }}/{{ item }}"
        dest: "/tmp/etcd-certs/{{ item }}"
        flat: yes
      run_once: true
      delegate_to: "{{ groups['etcd'][0] }}"
      loop:
        - 'etcd-ca.pem'
        - 'etcd-ca-key.pem'
        - 'etcd-server.pem'
        - 'etcd-server-key.pem'
      when: (not primary_cert_check.stat.exists) or (force_cert_sync|default(false))

    - name: 分发证书到ETCD节点
      copy:
        src: "/tmp/etcd-certs/{{ item }}"
        dest: "{{ etcd_ssl }}/{{ item }}"
        owner: etcd
        group: etcd
        mode: "{{ '0600' if 'key' in item else '0600' }}"
      loop:
        - 'etcd-ca.pem'
        - 'etcd-ca-key.pem'
        - 'etcd-server.pem'
        - 'etcd-server-key.pem'
      when: 
        - "'etcd' in group_names"
        - "(not primary_cert_check.stat.exists) or (force_cert_sync|default(false))"

    - name: 分发证书到K8s Master节点
      copy:
        src: "/tmp/etcd-certs/{{ item }}"
        dest: "{{ etcd_ssl }}/{{ item }}"
        owner: etcd
        group: etcd
        mode: "{{ '0600' if 'key' in item else '0600' }}"
      loop:
        - 'etcd-ca.pem'
        - 'etcd-ca-key.pem'
        - 'etcd-server.pem'
        - 'etcd-server-key.pem'
      when:
        - "'master' in group_names"
        - "(not primary_cert_check.stat.exists) or (force_cert_sync|default(false))"

    - name: 清理临时证书文件
      file:
        path: "/tmp/etcd-certs"
        state: absent
      ignore_errors: yes

- name: 启动 ETCD 服务
  block:
    - name: 创建 /var/lib/etcd 目录
      file:
        path: "{{ etcd_data }}"
        state: directory
        owner: etcd
        group: etcd
        mode: '0700'
      become: yes
      when: "'etcd' in group_names"
    
    - name: 复制etcd配置
      template:
        src: etcd.config.yml.j2
        dest: "{{ etcd_conf }}/etcd.config.yml"
        owner: etcd
        group: etcd
        mode: '0600'
      when: "'etcd' in group_names"
    
    - name: 检查是否已经存在etcd二进制文件
      stat:
        path: "/usr/local/src/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
      register: etcd_file
      when: "'etcd' in group_names"
    
    - name: 下载etcd二进制文件
      get_url:
        url: "{{ ghproxy }}https://github.com/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
        dest: "/usr/local/src/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
        mode: '0755'
        timeout: 30
      register: download_result
      retries: 10
      delay: 5
      until: download_result is succeeded
      when: "'etcd' in group_names and not etcd_file.stat.exists"
    
    - name: 解压etcd压缩包
      unarchive:
        src: "/usr/local/src/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
        dest: "/usr/local/src"
        remote_src: yes
      when: "'etcd' in group_names"
    
    - name: 移动 etcd 和 etcdctl 到 /usr/local/bin/
      command: mv /usr/local/src/etcd-{{ etcd_version }}-linux-amd64/{{ item }} /usr/local/bin/
      with_items:
        - etcd
        - etcdctl
      become: yes
      when: "'etcd' in group_names"
    
    - name: 赋予可执行权限
      file:
        path: /usr/bin/{{ item }}
        mode: '0755'
        state: file
      loop:
        - etcd
        - etcdctl
      when: "'etcd' in group_names"
    
    - name: 生成 etcd 服务文件
      template:
        src: templates/etcd.service.j2
        dest: /lib/systemd/system/etcd.service
        mode: '0600'
      become: yes
      when: "'etcd' in group_names"
    
    - name: 重新加载 systemd 服务文件
      systemd:
        daemon_reload: yes
      become: yes
      when: "'etcd' in group_names"
    
    - name: 禁用之前的 etcd 服务
      systemd:
        name: etcd
        state: stopped
        enabled: no
      ignore_errors: yes
      become: yes
      when: "'etcd' in group_names"
    
    #- name: 设置节点索引变量
    #  set_fact:
    #    current_node_index: "{{ groups['etcd'].index(inventory_hostname) }}"
    #  when: "'etcd' in group_names and inventory_hostname in groups['etcd']"
    #
    #- name: 设置是否为首个节点标志
    #  set_fact:
    #    is_first_node: "{{ current_node_index == 0 }}"
    #  when: "'etcd' in group_names and current_node_index is defined"

    #- name: 设置节点启动顺序变量
    #  set_fact:
    #    etcd_start_sequence: "{{ groups['etcd'] }}"
    #    current_node_index: "{{ groups['etcd'].index(inventory_hostname) }}"
    #    is_first_node: "{{ current_node_index == 0 }}"
    #  when: "'etcd' in group_names"
    #
    #- name: 启动第一个 ETCD 节点（集群初始化）
    #  systemd:
    #    name: etcd
    #    state: started
    #    enabled: yes
    #  become: yes
    #  when: >
    #    "'etcd' in group_names" and
    #    is_first_node and
    #    etcd_initial_cluster_state == 'new'
    #  register: first_node_start
    #
    #- name: 等待第一个 ETCD 节点就绪
    #  wait_for:
    #    host: "{{ hostvars[groups['etcd'][0]].ansible_default_ipv4.address }}"
    #    port: 2379
    #    timeout: 60
    #    state: started
    #    delay: 5
    #  when: >
    #    "'etcd' in group_names" and
    #    not is_first_node and
    #    etcd_initial_cluster_state == 'new'
    #  delegate_to: "{{ groups['etcd'][0] }}"
    #
    #- name: 启动非首个 ETCD 节点
    #  systemd:
    #    name: etcd
    #    state: started
    #    enabled: yes
    #  become: yes
    #  when: >
    #    "'etcd' in group_names" and
    #    (not is_first_node or etcd_initial_cluster_state != 'new')
    
    - name: 启动并启用 etcd 服务
      systemd:
        name: etcd
        state: restarted
        enabled: yes
      become: yes
      when: "'etcd' in group_names"

    - name: 验证 ETCD 集群健康
      shell: |
        ETCDCTL_API=3 etcdctl \
          --endpoints=https://{{ ansible_default_ipv4.address }}:2379 \
          --cacert={{ etcd_ssl }}/etcd-ca.pem \
          --cert={{ etcd_ssl }}/etcd-server.pem \
          --key={{ etcd_ssl }}/etcd-server-key.pem \
          endpoint health
      register: etcd_health
      changed_when: false
      become: yes
      when: "'etcd' in group_names"
    
    - name: 显示 ETCD 健康状态
      debug:
        msg: "ETCD 节点 {{ inventory_hostname }} 健康状态: {{ etcd_health.stdout }}"
      when: "'etcd' in group_names and etcd_health.stdout is defined"
  when: "'etcd' in group_names"

- name: 设置 etcd 备份系统
  block:
    - name: 创建备份目录
      file:
        path: "{{ etcd_backup_dir | default('/var/lib/etcd-backup') }}"
        state: directory
        owner: etcd
        group: etcd
        mode: '0750'

    - name: 安装 etcd 备份脚本
      template:
        src: templates/etcd-backup.sh.j2
        dest: /usr/local/bin/etcd-backup.sh
        owner: etcd
        group: etcd
        mode: '0750'

    - name: 安装 etcd-backup.service
      template:
        src: templates/etcd-backup.service.j2
        dest: /etc/systemd/system/etcd-backup.service
        owner: root
        group: root
        mode: '0600'

    - name: 安装 etcd-backup.timer
      template:
        src: templates/etcd-backup.timer.j2
        dest: /etc/systemd/system/etcd-backup.timer
        owner: root
        group: root
        mode: '0600'

    - name: 重载 systemd
      systemd:
        daemon_reload: yes

    - name: 启用并启动 etcd-backup.timer
      systemd:
        name: etcd-backup.timer
        enabled: yes
        state: started

    - name: 执行首次备份
      command: /usr/local/bin/etcd-backup.sh
      register: backup_result
      changed_when: false
      ignore_errors: yes

    - name: 显示首次备份结果
      debug:
        var: backup_result
  when: "'etcd' in group_names"
